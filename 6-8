Thank you for that information. It's helpful to know that these global objects are available. Since we see these standard window objects, but not a direct reference to the canvas or scene, we'll need to dig a bit deeper. Let's try a few approaches to locate and interact with the canvas and the 3D model:

1. First, let's try to find the canvas element:

```python
canvas = driver.execute_script("""
    return document.querySelector('canvas');
""")

if canvas:
    print("Canvas found")
else:
    print("Canvas not found")
```

2. If that works, we can try to access some properties or methods:

```python
resolution_scale = driver.execute_script("""
    var canvas = document.querySelector('canvas');
    if (canvas && canvas.resolutionScale) {
        return canvas.resolutionScale;
    }
    return null;
""")

print(f"Resolution scale: {resolution_scale}")
```

3. Let's try to find the scene object, which might be attached to the canvas or exist separately:

```python
scene = driver.execute_script("""
    if (window.scene) return 'global';
    var canvas = document.querySelector('canvas');
    if (canvas && canvas.scene) return 'canvas';
    for (var key in window) {
        if (window[key] && typeof window[key] === 'object' && window[key].canvas) {
            return key;
        }
    }
    return null;
""")

print(f"Scene found in: {scene}")
```

4. If we find the scene, we can try to interact with it:

```python
result = driver.execute_script("""
    var sceneObject;
    if (window.scene) {
        sceneObject = window.scene;
    } else {
        var canvas = document.querySelector('canvas');
        if (canvas && canvas.scene) {
            sceneObject = canvas.scene;
        } else {
            for (var key in window) {
                if (window[key] && typeof window[key] === 'object' && window[key].canvas) {
                    sceneObject = window[key];
                    break;
                }
            }
        }
    }
    
    if (sceneObject) {
        return {
            canvasWidth: sceneObject.canvas.width,
            canvasHeight: sceneObject.canvas.height,
            numObjects: sceneObject.objects ? Object.keys(sceneObject.objects).length : 'unknown'
        };
    }
    return null;
""")

if result:
    print(f"Canvas dimensions: {result['canvasWidth']}x{result['canvasHeight']}")
    print(f"Number of objects in scene: {result['numObjects']}")
else:
    print("Could not access scene properties")
```

5. To interact with the 3D model, we might need to find specific methods. Let's try to list available methods:

```python
methods = driver.execute_script("""
    var sceneObject;
    // ... (use the same logic as above to find sceneObject)
    
    if (sceneObject) {
        return Object.getOwnPropertyNames(Object.getPrototypeOf(sceneObject))
            .filter(method => typeof sceneObject[method] === 'function');
    }
    return [];
""")

print("Available methods:", methods)
```

6. If you find useful methods, you can try to call them:

```python
driver.execute_script("""
    var sceneObject;
    // ... (use the same logic as above to find sceneObject)
    
    if (sceneObject && sceneObject.someMethod) {
        sceneObject.someMethod();
    }
""")
```

These scripts attempt to locate and interact with the canvas and scene objects in various ways. They're designed to be flexible and work even if the objects aren't directly attached to the window object.

Remember to wrap these in try-except blocks to handle any JavaScript errors that might occur:

```python
try:
    result = driver.execute_script("...")
    # process result
except Exception as e:
    print(f"An error occurred: {e}")
```

If these approaches don't work, it might be necessary to inspect the application's source code or consult with the developers to understand the exact structure and how to interact with the 3D model programmatically.


Certainly! Running code in the browser console is a great way to explore the application and find available methods. Here are some code snippets you can try in the browser console to investigate the structure of the application and find useful methods:

1. Find the canvas element:

```javascript
var canvas = document.querySelector('canvas');
console.log(canvas);
```

2. Look for a global scene object:

```javascript
console.log(window.scene);
```

3. Search for objects that might contain the scene or canvas:

```javascript
Object.keys(window).forEach(key => {
    if (window[key] && typeof window[key] === 'object' && (window[key].canvas || window[key].scene)) {
        console.log('Potential scene object found:', key, window[key]);
    }
});
```

4. If you find a scene object, explore its properties and methods:

```javascript
// Replace 'scene' with the actual object name if different
console.log('Properties:', Object.keys(scene));
console.log('Methods:', Object.getOwnPropertyNames(Object.getPrototypeOf(scene)).filter(method => typeof scene[method] === 'function'));
```

5. Check for xeokit-specific properties:

```javascript
Object.keys(window).forEach(key => {
    if (window[key] && typeof window[key] === 'object' && window[key].xeokit) {
        console.log('xeokit object found:', key, window[key]);
    }
});
```

6. Look for a viewer object:

```javascript
Object.keys(window).forEach(key => {
    if (window[key] && typeof window[key] === 'object' && window[key].scene && window[key].camera) {
        console.log('Potential viewer object found:', key, window[key]);
    }
});
```

7. If you find a viewer object, explore its methods:

```javascript
// Replace 'viewer' with the actual object name
console.log('Viewer methods:', Object.getOwnPropertyNames(Object.getPrototypeOf(viewer)).filter(method => typeof viewer[method] === 'function'));
```

8. Check for model-related methods:

```javascript
// Replace 'viewer' or 'scene' with the actual object name
['loadModel', 'unloadModel', 'getModel', 'getModels', 'setModelVisible', 'getModelAABB'].forEach(methodName => {
    if (typeof viewer[methodName] === 'function') {
        console.log('Found method:', methodName);
    }
});
```

9. Look for camera-related methods:

```javascript
// Replace 'viewer' or 'scene' with the actual object name
['getCamera', 'setCameraPosition', 'setCameraTarget', 'getCameraPosition', 'getCameraTarget'].forEach(methodName => {
    if (typeof viewer[methodName] === 'function') {
        console.log('Found camera method:', methodName);
    }
});
```

10. Check for navigation methods:

```javascript
// Replace 'viewer' with the actual object name
['setViewFitDuration', 'setViewFitFOV', 'viewFit', 'flyTo'].forEach(methodName => {
    if (typeof viewer[methodName] === 'function') {
        console.log('Found navigation method:', methodName);
    }
});
```

Run these snippets in the browser console while your 3D application is open. They will help you discover the structure of the application and find methods that you can potentially use for automation.

Once you find useful objects or methods, you can experiment with them directly in the console. For example, if you find a `viewFit` method, you could try:

```javascript
viewer.viewFit();
```

Remember to replace `viewer` with the actual object name you discover.

After you've identified the correct objects and methods, you can then use this information to construct your Selenium scripts, using `driver.execute_script()` to call these methods or access these objects.







Certainly! Here's the JavaScript code you can run directly in your browser's console to interact with the 3D viewer based on the methods and properties we saw in the image:

1. To find the viewer object (you may need to adjust this based on how it's actually named in your application):

```javascript
function findViewer() {
    return Object.values(window).find(obj => 
        obj && typeof obj === 'object' && 
        obj._scene && obj._scene.camera &&
        typeof obj.getRTCViewMatrix === 'function'
    );
}

var viewer = findViewer();
console.log('Viewer object:', viewer);
```

2. To access and log the camera position:

```javascript
if (viewer && viewer._scene && viewer._scene.camera) {
    console.log('Camera position:', viewer._scene.camera.eye);
    console.log('Camera look at:', viewer._scene.camera.look);
    console.log('Camera up vector:', viewer._scene.camera.up);
}
```

3. To change the camera view:

```javascript
if (viewer && viewer._scene && viewer._scene.camera) {
    viewer._scene.camera.eye = [10, 10, 10];
    viewer._scene.camera.look = [0, 0, 0];
    viewer._scene.camera.up = [0, 1, 0];
    // You might need to call a method to update the view, like:
    // viewer._scene.camera.update();
    console.log('Camera view changed');
}
```

4. To use the picking functionality (if available):

```javascript
if (viewer && typeof viewer.pick === 'function') {
    var pickResult = viewer.pick({
        canvasPos: [100, 100]  // Example canvas coordinates
    });
    console.log('Picked object:', pickResult);
}
```

5. To access snap picking properties:

```javascript
if (viewer) {
    console.log('Snap pick layer number:', viewer.snapPickLayerNumber);
    console.log('Snap pick coordinate scale:', viewer.snapPickCoordinateScale);
    console.log('Snap pick origin:', viewer.snapPickOrigin);
}
```

6. To use the getRTCViewMatrix method:

```javascript
if (viewer && typeof viewer.getRTCViewMatrix === 'function') {
    var matrix = viewer.getRTCViewMatrix('someId', [0, 0, 0]);
    console.log('RTC View Matrix:', matrix);
}
```

7. To explore available methods on the viewer object:

```javascript
if (viewer) {
    console.log('Viewer methods:', 
        Object.getOwnPropertyNames(Object.getPrototypeOf(viewer))
            .filter(method => typeof viewer[method] === 'function')
    );
}
```

Remember to run the first snippet to find and assign the viewer object before running the other snippets. You may need to adjust the property and method names based on the actual implementation in your application.

These console commands will help you explore and interact with the 3D viewer directly in the browser. Once you've confirmed which methods work and how to use them, you can then translate these into Selenium commands using Python's `driver.execute_script()` method.




I apologize for the confusion. If the viewer object is undefined, it means we need to dig deeper to find the correct object. Let's try a more comprehensive approach to locate the relevant objects and methods. Here are some console commands you can run to explore the application structure:

1. Search for objects with 3D-related properties:

```javascript
function findRelevantObjects() {
    return Object.keys(window).filter(key => {
        const obj = window[key];
        return obj && typeof obj === 'object' && (
            obj.scene || 
            obj.camera || 
            obj.canvas ||
            (obj._scene && obj._scene.camera) ||
            typeof obj.getRTCViewMatrix === 'function' ||
            typeof obj.pick === 'function'
        );
    });
}

var relevantObjects = findRelevantObjects();
console.log('Potentially relevant objects:', relevantObjects);

relevantObjects.forEach(key => {
    console.log(`\nExploring object: ${key}`);
    console.log('Properties:', Object.keys(window[key]));
    console.log('Methods:', 
        Object.getOwnPropertyNames(Object.getPrototypeOf(window[key]))
            .filter(method => typeof window[key][method] === 'function')
    );
});
```

2. Look for canvas elements, which are often used for 3D rendering:

```javascript
var canvases = document.querySelectorAll('canvas');
console.log('Canvas elements found:', canvases.length);
canvases.forEach((canvas, index) => {
    console.log(`Canvas ${index}:`, canvas);
    console.log('Canvas properties:', Object.keys(canvas));
});
```

3. Search for objects with specific methods we saw in the image:

```javascript
function findObjectsWithMethods(methodNames) {
    return Object.keys(window).filter(key => {
        const obj = window[key];
        return obj && typeof obj === 'object' && 
            methodNames.some(method => typeof obj[method] === 'function');
    });
}

var methodNames = ['getRTCViewMatrix', 'getRTCPickViewMatrix', 'getNewMat'];
var objectsWithMethods = findObjectsWithMethods(methodNames);
console.log('Objects with specific methods:', objectsWithMethods);

objectsWithMethods.forEach(key => {
    console.log(`\nExploring object: ${key}`);
    console.log('Methods found:', 
        methodNames.filter(method => typeof window[key][method] === 'function')
    );
});
```

4. Look for objects with the properties we saw in the image:

```javascript
function findObjectsWithProperties(propertyNames) {
    return Object.keys(window).filter(key => {
        const obj = window[key];
        return obj && typeof obj === 'object' && 
            propertyNames.some(prop => prop in obj);
    });
}

var propertyNames = ['snapPickLayerParams', 'snapPickLayerNumber', 'snapPickCoordinateScale', 'snapPickOrigin'];
var objectsWithProperties = findObjectsWithProperties(propertyNames);
console.log('Objects with specific properties:', objectsWithProperties);

objectsWithProperties.forEach(key => {
    console.log(`\nExploring object: ${key}`);
    console.log('Properties found:', 
        propertyNames.filter(prop => prop in window[key])
    );
});
```

5. If you find any promising objects, explore them further:

```javascript
function exploreObject(obj, name = 'Object') {
    console.log(`\nExploring ${name}:`);
    console.log('Properties:', Object.keys(obj));
    console.log('Methods:', 
        Object.getOwnPropertyNames(Object.getPrototypeOf(obj))
            .filter(method => typeof obj[method] === 'function')
    );
    
    if (obj.scene || obj._scene) {
        console.log('Scene found, exploring further:');
        exploreObject(obj.scene || obj._scene, 'Scene');
    }
    
    if (obj.camera || (obj._scene && obj._scene.camera)) {
        console.log('Camera found, exploring further:');
        exploreObject(obj.camera || obj._scene.camera, 'Camera');
    }
}

// Replace 'promisingObjectName' with any object name you found from previous searches
exploreObject(window.promisingObjectName, 'PromisingObject');
```

Run these scripts in the console one by one. They will help you identify objects that might be related to the 3D viewer, even if they're not named exactly as we expected.

Once you find objects with relevant properties or methods, you can start interacting with them. For example, if you find an object with a `camera` property:

```javascript
var viewerObject = window.promisingObjectName;  // Replace with the actual object name you found
if (viewerObject && viewerObject.camera) {
    console.log('Camera position:', viewerObject.camera.position);
    viewerObject.camera.position.set(10, 10, 10);  // This syntax might vary
    console.log('New camera position:', viewerObject.camera.position);
}
```

Remember, the exact structure and method names might be different in your specific implementation. These scripts are designed to help you explore and find the correct objects and methods to interact with.



Thank you for sharing the image. It looks like you have a script that loads JavaScript files with a cache buster parameter. This is useful for ensuring that the browser fetches the latest version of the script.

Given this context, we can inject our custom script after the page has loaded and the `xeokit` viewer is initialized. Here's how you can do it:

### Step 1: Modify the Existing JavaScript to Expose the Viewer

If you can modify the existing JavaScript file (e.g., `config.js`), add the following code at the end of that file to expose the viewer and necessary functions:

```javascript
// Assuming the viewer is initialized like this
const viewer = new xeokit.Viewer({
    id: "myViewer",
    canvasId: "myCanvas"
});

// Expose the viewer globally
window.myViewer = viewer;

// Additional functions to interact with the viewer
window.flyToPosition = function(eye, look, up, duration) {
    viewer.cameraControl.flyTo({
        eye: eye,
        look: look,
        up: up,
        duration: duration
    });
};

window.zoomToEntity = function(entityId) {
    const entity = viewer.scene.entities[entityId];
    viewer.cameraControl.zoomEntity(entity);
};

window.rotateModel = function(axis, angle) {
    viewer.cameraControl.rotate(axis[0], angle, axis[1]);
};
```

### Step 2: Inject JavaScript at Runtime with Selenium

Use Selenium to inject and call the exposed functions.

#### Example Selenium Java Code:

```java
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

public class XeokitAutomation {
    public static void main(String[] args) {
        // Set up the WebDriver (ChromeDriver in this case)
        System.setProperty("webdriver.chrome.driver", "path/to/chromedriver");
        WebDriver driver = new ChromeDriver();

        // Load the page with the 3D model
        driver.get("URL_OF_YOUR_PAGE");

        // Wait for the page to load completely
        try {
            Thread.sleep(5000); // Adjust the sleep time as needed
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        // Inject JavaScript to expose xeokit viewer and functions
        JavascriptExecutor js = (JavascriptExecutor) driver;
        String script = "window.flyToPosition = function(eye, look, up, duration) {" +
                        "    var viewer = window.myViewer;" +
                        "    viewer.cameraControl.flyTo({eye: eye, look: look, up: up, duration: duration});" +
                        "};" +
                        "window.zoomToEntity = function(entityId) {" +
                        "    var viewer = window.myViewer;" +
                        "    const entity = viewer.scene.entities[entityId];" +
                        "    viewer.cameraControl.zoomEntity(entity);" +
                        "};" +
                        "window.rotateModel = function(axis, angle) {" +
                        "    var viewer = window.myViewer;" +
                        "    viewer.cameraControl.rotate(axis[0], angle, axis[1]);" +
                        "};";
        js.executeScript(script);

        // Interact with the 3D model using the injected functions
        String flyToScript = "window.flyToPosition([10, 10, 10], [0, 0, 0], [0, 1, 0], 1);";
        js.executeScript(flyToScript);

        String zoomToScript = "window.zoomToEntity('ENTITY_ID');";
        js.executeScript(zoomToScript);

        String rotateScript = "window.rotateModel([0, 1], 45);"; // Rotate 45 degrees around Y-axis
        js.executeScript(rotateScript);

        // Close the browser
        driver.quit();
    }
}
```

### Explanation

1. **Modify the Application Code**: Add code to `config.js` or any other relevant JavaScript file to expose the `xeokit` viewer and functions globally.
2. **Wait for the Page to Load**: Use `Thread.sleep` to wait for the page to load completely.
3. **Inject JavaScript Functions**: Use the `executeScript` method to inject JavaScript functions that interact with the xeokit viewer.
4. **Execute Actions**: Call the injected functions to interact with the 3D model.
5. **Close the Browser**: After performing the interactions, close the browser.

This approach ensures that you can interact with the `xeokit` viewer even if it is not directly accessible in the global scope initially.



Thank you for providing that information. It's very helpful to know that they're using the xeokit library, specifically the CameraControl module. Since xeokit is not globally exposed, we'll need to find a way to access it through the application's structure. Here's what we can try:

1. Search for the viewer instance:
   The xeokit viewer is typically instantiated and might be stored in a variable. Let's try to find it:

```javascript
function findXeokitViewer() {
    return Object.values(window).find(obj => 
        obj && typeof obj === 'object' && 
        obj.scene && obj.scene.camera && 
        obj.scene.canvas && 
        typeof obj.scene.canvas.getContext === 'function'
    );
}

var viewer = findXeokitViewer();
console.log('Xeokit Viewer:', viewer);
```

2. If you find the viewer, explore its properties:

```javascript
if (viewer) {
    console.log('Viewer properties:', Object.keys(viewer));
    console.log('Scene properties:', Object.keys(viewer.scene));
    console.log('Camera properties:', Object.keys(viewer.scene.camera));
    console.log('CameraControl properties:', Object.keys(viewer.cameraControl));
}
```

3. Try to access and manipulate the camera:

```javascript
if (viewer && viewer.scene && viewer.scene.camera) {
    var camera = viewer.scene.camera;
    console.log('Camera eye:', camera.eye);
    console.log('Camera look:', camera.look);
    console.log('Camera up:', camera.up);
    
    // Try to move the camera
    camera.eye = [10, 10, 10];
    camera.look = [0, 0, 0];
    camera.up = [0, 1, 0];
    
    // Force update if needed
    if (typeof camera.update === 'function') {
        camera.update();
    }
}
```

4. Try to use CameraControl methods:

```javascript
if (viewer && viewer.cameraControl) {
    var cameraControl = viewer.cameraControl;
    
    // Try some CameraControl methods
    if (typeof cameraControl.pivotToAabb === 'function') {
        cameraControl.pivotToAabb(viewer.scene.aabb);
    }
    
    if (typeof cameraControl.fitToView === 'function') {
        cameraControl.fitToView();
    }
}
```

5. Look for specific xeokit plugins:

```javascript
function findXeokitPlugins() {
    if (viewer && viewer.plugins) {
        return Object.keys(viewer.plugins);
    }
    return [];
}

var plugins = findXeokitPlugins();
console.log('Xeokit Plugins:', plugins);
```

6. If you find plugins, try to use them:

```javascript
if (viewer && viewer.plugins) {
    // Example with a hypothetical "BCFViewpointsPlugin"
    var bcfPlugin = viewer.plugins.BCFViewpointsPlugin;
    if (bcfPlugin && typeof bcfPlugin.setViewpoint === 'function') {
        bcfPlugin.setViewpoint(/* viewpoint data */);
    }
    
    // Example with a hypothetical "TreeViewPlugin"
    var treeViewPlugin = viewer.plugins.TreeViewPlugin;
    if (treeViewPlugin && typeof treeViewPlugin.showNode === 'function') {
        treeViewPlugin.showNode('some-node-id');
    }
}
```

7. Try to access the canvas directly:

```javascript
if (viewer && viewer.scene && viewer.scene.canvas) {
    var canvas = viewer.scene.canvas;
    console.log('Canvas dimensions:', canvas.width, 'x', canvas.height);
    
    // You might be able to get the WebGL context
    var gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
    if (gl) {
        console.log('WebGL context acquired');
    }
}
```

These scripts should help you explore and interact with the xeokit viewer, even if it's not globally exposed. Run them in the console and see what information you can gather. Once you find the correct paths to access the viewer and its components, you can use this information to construct your Selenium commands using `driver.execute_script()`.

Remember, the exact structure might vary depending on how the application has implemented and configured xeokit. You may need to adjust these scripts based on what you find in your specific implementation.





I apologize for the continued difficulty. If we're still not able to find the viewer object directly, we'll need to take a more comprehensive approach. Let's try to inspect the entire window object and look for any properties that might be related to the 3D viewer or xeokit. Here's a series of console commands to help us dive deeper:

1. Inspect all global variables:

```javascript
function inspectGlobalScope() {
    const globals = Object.keys(window).filter(key => {
        try {
            return window[key] && typeof window[key] === 'object';
        } catch (e) {
            return false;
        }
    });

    console.log('Potential global objects:', globals);

    globals.forEach(key => {
        try {
            const obj = window[key];
            const hasCanvas = obj.canvas || (obj.scene && obj.scene.canvas);
            const hasCamera = obj.camera || (obj.scene && obj.scene.camera);
            const has3DMethods = typeof obj.loadModel === 'function' || typeof obj.viewFit === 'function';

            if (hasCanvas || hasCamera || has3DMethods) {
                console.log(`\nPromising object found: ${key}`);
                console.log('Properties:', Object.keys(obj));
                console.log('Methods:', Object.getOwnPropertyNames(Object.getPrototypeOf(obj))
                    .filter(method => typeof obj[method] === 'function'));
            }
        } catch (e) {
            // Ignore errors
        }
    });
}

inspectGlobalScope();
```

2. Search for xeokit-related strings:

```javascript
function searchForXeokitStrings() {
    const xeokitKeywords = ['xeokit', 'viewer', 'scene', 'camera', 'model', '3d'];
    const results = {};

    Object.keys(window).forEach(key => {
        try {
            const stringified = JSON.stringify(window[key]);
            xeokitKeywords.forEach(keyword => {
                if (stringified.toLowerCase().includes(keyword)) {
                    if (!results[key]) results[key] = [];
                    results[key].push(keyword);
                }
            });
        } catch (e) {
            // Ignore errors
        }
    });

    console.log('Objects containing xeokit-related strings:', results);
}

searchForXeokitStrings();
```

3. Look for canvas elements and their parent objects:

```javascript
function findCanvasAndParents() {
    const canvases = Array.from(document.querySelectorAll('canvas'));
    console.log('Canvas elements found:', canvases.length);

    canvases.forEach((canvas, index) => {
        console.log(`\nCanvas ${index}:`, canvas);
        let parent = canvas.parentElement;
        let depth = 0;
        while (parent && depth < 5) {
            console.log(`Parent at depth ${depth}:`, parent);
            if (parent.id) console.log('Parent ID:', parent.id);
            if (parent.className) console.log('Parent Class:', parent.className);
            parent = parent.parentElement;
            depth++;
        }
    });
}

findCanvasAndParents();
```

4. Search for objects with specific xeokit method names:

```javascript
function findObjectsWithXeokitMethods() {
    const methodNames = ['loadModel', 'viewFit', 'scene', 'camera', 'plugins'];
    const results = {};

    function searchObject(obj, path = '') {
        if (obj && typeof obj === 'object') {
            methodNames.forEach(method => {
                if (obj[method] && (typeof obj[method] === 'function' || typeof obj[method] === 'object')) {
                    if (!results[path]) results[path] = [];
                    results[path].push(method);
                }
            });

            Object.keys(obj).forEach(key => {
                if (obj[key] && typeof obj[key] === 'object') {
                    searchObject(obj[key], path ? `${path}.${key}` : key);
                }
            });
        }
    }

    searchObject(window);
    console.log('Objects with xeokit-like methods:', results);
}

findObjectsWithXeokitMethods();
```

5. If you find any promising objects, explore them further:

```javascript
function exploreObject(path) {
    const parts = path.split('.');
    let obj = window;
    for (const part of parts) {
        obj = obj[part];
        if (!obj) break;
    }

    if (obj) {
        console.log(`\nExploring object at path: ${path}`);
        console.log('Properties:', Object.keys(obj));
        console.log('Methods:', Object.getOwnPropertyNames(Object.getPrototypeOf(obj))
            .filter(method => typeof obj[method] === 'function'));
        
        if (obj.scene) {
            console.log('\nScene properties:', Object.keys(obj.scene));
        }
        if (obj.camera || (obj.scene && obj.scene.camera)) {
            const camera = obj.camera || obj.scene.camera;
            console.log('\nCamera properties:', Object.keys(camera));
        }
    } else {
        console.log(`Object not found at path: ${path}`);
    }
}

// Use this function with paths you find from the previous searches
// For example:
// exploreObject('someGlobalObject.viewer');
```

Run these scripts in the console one by one. They will help you thoroughly inspect the application's structure and hopefully locate the xeokit viewer or related objects.

Once you find any relevant objects or paths, you can use the `exploreObject` function to dig deeper. If you discover any specific methods or properties, you can then try to interact with them directly in the console.

Remember, modern web applications often use module bundlers and minification, which can make it challenging to find objects directly. If these methods don't work, you might need to consult the application's developers or documentation for specific ways to access the xeokit viewer in your particular implementation.
