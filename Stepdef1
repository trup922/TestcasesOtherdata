Sure! Let's expand on the step definitions and include more detailed logic for each step in your provided scenarios.

### Expanded Step Definitions

#### ViewerStepDefinitions.java

```java
import io.cucumber.java.en.*;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.testng.Assert;

public class ViewerStepDefinitions {
    WebDriver driver;
    ViewerPage viewerPage;
    
    public ViewerStepDefinitions() {
        driver = Hooks.getDriver();  // Assuming Hooks is a class that initializes WebDriver
        viewerPage = new ViewerPage(driver);
    }

    @Given("viewer is displayed and no model is loaded")
    public void viewer_is_displayed_and_no_model_is_loaded() {
        viewerPage.displayViewer();
        Assert.assertFalse(viewerPage.isModelLoaded());
    }

    @When("I load a model")
    public void i_load_a_model() {
        viewerPage.loadModel();
    }

    @Then("Orbit view is selected by default")
    public void orbit_view_is_selected_by_default() {
        Assert.assertTrue(viewerPage.isOrbitViewSelected());
    }

    @And("tooltip {string} is displayed when hovering button")
    public void tooltip_is_displayed_when_hovering_button(String tooltip) {
        Assert.assertTrue(viewerPage.isTooltipDisplayed(tooltip));
    }

    @When("Perspective mode is activated")
    public void perspective_mode_is_activated() {
        viewerPage.activatePerspectiveMode();
    }

    @When("I click on {string} button")
    public void i_click_on_button(String buttonName) {
        viewerPage.clickButton(buttonName);
    }

    @Then("I should be able to visualize my model with {string} projection")
    public void i_should_be_able_to_visualize_my_model_with_projection(String projectionType) {
        Assert.assertTrue(viewerPage.isProjectionTypeDisplayed(projectionType));
    }

    @Then("tooltip is {string}")
    public void tooltip_is(String expectedTooltip) {
        Assert.assertEquals(viewerPage.getTooltipText(), expectedTooltip);
    }

    @When("checking which viewing mode is activated")
    public void checking_which_viewing_mode_is_activated() {
        // Logic to check the viewing mode
    }

    @Then("Camera view is activated as viewing mode")
    public void camera_view_is_activated_as_viewing_mode() {
        Assert.assertTrue(viewerPage.isCameraViewActivated());
    }

    @When("I click on {string} mode button")
    public void i_click_on_mode_button(String mode) {
        viewerPage.clickModeButton(mode);
    }

    @Then("I should be able to navigate throughout the model on {string} mode with the mouse roll")
    public void i_should_be_able_to_navigate_throughout_the_model_on_mode_with_the_mouse_roll(String mode) {
        Assert.assertTrue(viewerPage.canNavigateInMode(mode));
    }

    @When("I click on left mouse button and I move my mouse")
    public void i_click_on_left_mouse_button_and_i_move_my_mouse() {
        viewerPage.orbitModel();
    }

    @Then("I should be able to orbit around the model")
    public void i_should_be_able_to_orbit_around_the_model() {
        Assert.assertTrue(viewerPage.canOrbitModel());
    }

    @When("I maintain the left or right mouse button clicked and I move the mouse")
    public void i_maintain_the_left_or_right_mouse_button_clicked_and_i_move_the_mouse() {
        viewerPage.panModel();
    }

    @Then("the model should perform a translation in the view")
    public void the_model_should_perform_a_translation_in_the_view() {
        Assert.assertTrue(viewerPage.isModelTranslated());
    }

    @When("I click on Default view button")
    public void i_click_on_default_view_button() {
        viewerPage.clickDefaultViewButton();
    }

    @Then("I should be able to have the default view state as the model freshly loaded")
    public void i_should_be_able_to_have_the_default_view_state_as_the_model_freshly_loaded() {
        Assert.assertTrue(viewerPage.isDefaultViewState());
    }

    @When("I compare screens on links to navigation behavior of VDC application")
    public void i_compare_screens_on_links_to_navigation_behavior_of_vdc_application() {
        viewerPage.compareNavigationBehavior();
    }

    @Then("behaviors are the same")
    public void behaviors_are_the_same() {
        Assert.assertTrue(viewerPage.areBehaviorsSame());
    }

    @When("I select an object and I maintain the left mouse button clicked and I move the mouse")
    public void i_select_an_object_and_i_maintain_the_left_mouse_button_clicked_and_i_move_the_mouse() {
        viewerPage.rotateAroundModel();
    }

    @Then("I should be able to perform a rotation around the model according to the center of the object")
    public void i_should_be_able_to_perform_a_rotation_around_the_model_according_to_the_center_of_the_object() {
        Assert.assertTrue(viewerPage.canRotateAroundObjectCenter());
    }
}
```

### Expanded Viewer Page

#### ViewerPage.java

```java
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;

public class ViewerPage extends BasePage {
    @FindBy(id = "modelLoader")
    WebElement modelLoader;

    @FindBy(id = "orbitViewButton")
    WebElement orbitViewButton;

    @FindBy(id = "perspectiveModeButton")
    WebElement perspectiveModeButton;

    @FindBy(id = "orthographicModeButton")
    WebElement orthographicModeButton;

    @FindBy(id = "firstPersonModeButton")
    WebElement firstPersonModeButton;

    @FindBy(id = "panModeButton")
    WebElement panModeButton;

    @FindBy(id = "defaultViewButton")
    WebElement defaultViewButton;

    @FindBy(id = "cameraViewButton")
    WebElement cameraViewButton;

    public ViewerPage(WebDriver driver) {
        super(driver);
        PageFactory.initElements(driver, this);
    }

    public void displayViewer() {
        // Logic to display viewer
    }

    public void loadModel() {
        click(modelLoader);
        // Additional logic to load model
    }

    public boolean isModelLoaded() {
        // Logic to verify if model is loaded
        return true;
    }

    public boolean isOrbitViewSelected() {
        // Logic to check if orbit view is selected
        return orbitViewButton.getAttribute("class").contains("selected");
    }

    public boolean isTooltipDisplayed(String tooltip) {
        hover(orbitViewButton);
        return getTooltipText().equals(tooltip);
    }

    public void activatePerspectiveMode() {
        click(perspectiveModeButton);
    }

    public void clickButton(String buttonName) {
        switch (buttonName) {
            case "Orthographic mode":
                click(orthographicModeButton);
                break;
            case "Perspective mode":
                click(perspectiveModeButton);
                break;
            // Add more cases as needed...
        }
    }

    public boolean isProjectionTypeDisplayed(String projectionType) {
        // Logic to verify projection type
        return true;
    }

    public boolean isCameraViewActivated() {
        return cameraViewButton.getAttribute("class").contains("active");
    }

    public void clickModeButton(String mode) {
        switch (mode) {
            case "First Person Mode":
                click(firstPersonModeButton);
                break;
            // Add more cases as needed...
        }
    }

    public boolean canNavigateInMode(String mode) {
        // Logic to verify navigation in the specified mode
        return true;
    }

    public void orbitModel() {
        Actions actions = new Actions(driver);
        actions.clickAndHold(orbitViewButton).moveByOffset(100, 100).release().perform();
    }

    public boolean canOrbitModel() {
        // Logic to verify orbit functionality
        return true;
    }

    public void panModel() {
        Actions actions = new Actions(driver);
        actions.clickAndHold(panModeButton).moveByOffset(100, 100).release().perform();
    }

    public boolean isModelTranslated() {
        // Logic to verify model translation
        return true;
    }

    public void clickDefaultViewButton() {
        click(defaultViewButton);
    }

    public boolean isDefaultViewState() {
        // Logic to verify default view state
        return true;
    }

    public void compareNavigationBehavior() {
        // Logic to compare navigation behavior
    }

    public boolean areBehaviorsSame() {
        // Logic to verify behaviors
        return true;
    }

    public void rotateAroundModel() {
        Actions actions = new Actions(driver);
        actions.clickAndHold(orbitViewButton).moveByOffset(100, 100).release().perform();
    }

    public boolean canRotateAroundObjectCenter() {
        // Logic to verify rotation around object center
        return true;
    }
}
```

### Summary
- **Step Definitions:** These methods map to the steps in your Gherkin scenarios and call the corresponding methods in the `ViewerPage` class.
- **ViewerPage Class:** Contains methods specific to viewer interactions, such as loading a model, selecting a view mode, and performing navigations.
- **BasePage Class:** Contains common utility methods used across different page objects.

By following this structure, you can maintain clean and organized code that is easy to maintain and extend as needed.
